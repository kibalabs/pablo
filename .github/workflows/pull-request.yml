name: Build
on:
  pull_request:
    branches: [main]
jobs:
  build-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    env:
      DOCKER_IMAGE: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Build docker image
        run: docker build --tag $DOCKER_IMAGE .
      - name: Run linting
        run: |
          docker run --name linting $DOCKER_IMAGE lint --directory pablo --output-file linting-results.json --output-format annotations
          docker cp linting:/app/linting-results.json ./linting-results.json
      - name: Upload linting results
        uses: kibalabs/github-action-create-annotations@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          json-file-path: ./api/linting-results.json
          check-name: lint-api
          fail-on-error: false
  build-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    env:
      DOCKER_IMAGE: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Build docker image
        run: docker build --tag $DOCKER_IMAGE .
      - name: Run linting
        run: |
          docker run --name linting $DOCKER_IMAGE lint --directory pablo --output-file linting-results.json --output-format annotations
          docker cp linting:/app/linting-results.json ./linting-results.json
      - name: Upload linting results
        uses: kibalabs/github-action-create-annotations@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          json-file-path: ./client/linting-results.json
          check-name: lint-client
          fail-on-error: false
  deploy-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    env:
      DOCKER_IMAGE: package
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Build docker image
        run: docker build --tag $DOCKER_IMAGE .
      - name: Check if already published
        id: check
        run: |
          version=$(docker run --rm $DOCKER_IMAGE python setup.py --version)
          name=$(docker run --rm $DOCKER_IMAGE python setup.py --name)
          docker run --rm $DOCKER_IMAGE pip install ${version}==${name}
          echo ::set-output name=exists::$(if [ $? -ne 0 ]; echo 0; else echo 1; fi)
      - name: Create .pypirc file
        if: steps.check.outputs.exists != '1'
        run: echo -e "[pypi]\nusername=__token__\npassword=$PYPI_TOKEN" > .pypirc
      # - name: Publish package to pypi
      #   if: steps.check.outputs.exists != '1'
      #   run: |
      #     docker run -v $(pwd)/.pypirc:/root/.pypirc $DOCKER_IMAGE /bin/bash -c " \
      #       version --part dev --count ${{ steps.package_vars.outputs.commit_count }} \
      #       && python setup.py bdist_wheel \
      #       && twine upload --non-interactive --disable-progress-bar dist/* \
      #     "
