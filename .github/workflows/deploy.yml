name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    env:
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}-api:latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Login to GitHub container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
      - name: Build docker image
        run: docker build --tag $DOCKER_IMAGE .
      - name: Push to container registry
        run: docker push $DOCKER_IMAGE
  deploy-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    env:
      DOCKER_IMAGE: package
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Build docker image
        run: docker build --tag $DOCKER_IMAGE .
      - name: Check if already published
        id: check
        continue-on-error: true
        run: |
          version=$(docker run --rm $DOCKER_IMAGE python setup.py --version)
          name=$(docker run --rm $DOCKER_IMAGE python setup.py --name)
          docker run --rm $DOCKER_IMAGE pip install ${version}==${name}
          echo ::set-output name=exists::$(if [ $? -eq 0 ]; then echo 1; else echo 0; fi)
          echo ::set-output name=version::$(echo "v$version")
      - name: Create .pypirc file
        if: steps.check.outputs.exists != '1'
        run: echo -e "[pypi]\nusername=__token__\npassword=$PYPI_TOKEN" > .pypirc
      - name: Publish package to pypi
        if: steps.check.outputs.exists != '1'
        run: |
          docker run -v $(pwd)/.pypirc:/root/.pypirc $DOCKER_IMAGE /bin/bash -c " \
            python setup.py bdist_wheel \
            && twine upload --non-interactive --disable-progress-bar dist/* \
          "
      - name: Create Release
        uses: actions/create-release@v1
        if: steps.check.outputs.exists != '1'
        with:
          tag_name: client-${{ steps.check.outputs.version }}
          release_name: Client ${{ steps.check.outputs.version }}
          draft: false
          prerelease: false
  run-worker:
    needs: deploy-api
    runs-on: ubuntu-latest
    env:
      NAME: pablo-worker
      VERSION: ${{ github.sha }}
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}-api:latest
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WORKERBOX_URL }}
          username: ${{ secrets.WORKERBOX_USER }}
          key: ${{ secrets.WORKERBOX_SSH_KEY }}
          port: ${{ secrets.WORKERBOX_PORT }}
          envs: DOCKER_IMAGE,NAME,VERSION
          script_stop: true
          script: |
            varsFile=~/.${NAME}.vars
            docker pull ${DOCKER_IMAGE}
            docker stop ${NAME} && docker rm ${NAME} || true
            docker run \
              --name ${NAME} \
              --detach \
              --publish-all \
              --restart on-failure \
              --memory 768m \
              --env NAME=${NAME} \
              --env VERSION=${VERSION} \
              --env-file ${varsFile} \
              ${DOCKER_IMAGE} './start-worker.sh'
  run-api:
    needs: deploy-api
    runs-on: ubuntu-latest
    env:
      NAME: pablo-api
      VERSION: ${{ github.sha }}
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}-api:latest
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.APIBOX_URL }}
          username: ${{ secrets.APIBOX_USER }}
          key: ${{ secrets.APIBOX_SSH_KEY }}
          port: ${{ secrets.APIBOX_PORT }}
          envs: DOCKER_IMAGE,NAME,VERSION
          script_stop: true
          script: |
            url="pablo-api.kibalabs.com"
            varsFile=~/.${NAME}.vars
            docker pull ${DOCKER_IMAGE}
            docker stop ${NAME} && docker rm ${NAME} || true
            docker run \
              --name ${NAME} \
              --detach \
              --publish-all \
              --restart on-failure \
              --env NAME=${NAME} \
              --env VERSION=${VERSION} \
              --env VIRTUAL_HOST=${url} \
              --env LETSENCRYPT_HOST=${url} \
              --env-file ${varsFile} \
              ${DOCKER_IMAGE} './start-api.sh'
